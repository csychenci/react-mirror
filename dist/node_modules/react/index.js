(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (!dispatcher) {
	        throw new Error('hooks 只能在函数式组件中执行');
	    }
	    return dispatcher;
	};

	const supportSymbol = typeof Symbol === 'function' &&
	    typeof Symbol.for === 'function';
	// 如果支持Symbol，则使用Symbol.for来创建一个唯一的Symbol，否则使用一个固定的数字
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xaecb;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        key,
	        ref,
	        props,
	        __mark: 'react.element',
	        type
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    // if (props.children) {
	    // 	const childrenLength = props.children.length;
	    // 	console.log('maybeChildren', maybeChildren);
	    // 	if (childrenLength) {
	    // 		if (childrenLength === 1) {
	    // 			props.children = props.children[0];
	    // 		} else {
	    // 			props.children = props.children;
	    // 		}
	    // 	}
	    // }
	    const maybeChildrenLength = maybeChildren.length;
	    console.log('maybeChildren', maybeChildren);
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = jsx;

	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	const useEffect = (create, deps) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useEffect(create, deps);
	};
	// 内部数据共享层
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher
	};
	var index = {
	    version: '0.0.0',
	    createElement: jsx,
	    createElementDEV: jsxDEV
	};

	exports.Fragment = REACT_FRAGMENT_TYPE;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.default = index;
	exports.useEffect = useEffect;
	exports.useState = useState;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
