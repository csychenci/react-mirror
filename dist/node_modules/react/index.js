(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	const supportSymbol = typeof Symbol === 'function' &&
	    typeof Symbol.for === 'function';
	// 如果支持Symbol，则使用Symbol.for来创建一个唯一的Symbol，否则使用一个固定的数字
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        key,
	        ref,
	        props,
	        __mark: 'react.element',
	        type
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    for (const prop in config) {
	        const val = config[prop];
	        switch (props) {
	            case 'key':
	                if (val !== undefined) {
	                    key = '' + val;
	                }
	                break;
	            case 'ref':
	                if (val !== undefined) {
	                    ref = val;
	                }
	                break;
	            case {}.hasOwnProperty.call(config, prop):
	                props[prop] = val;
	                break;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = jsx;

	var index = {
	    version: '0.0.0',
	    createElement: jsx,
	    createElementDEV: jsxDEV
	};

	return index;

}));
